buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.61"
    }
}

plugins {
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.61"
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "org.openapi.generator" version "4.2.2"
    id 'org.hidetake.swagger.generator' version '2.18.1'
}

group = 'exsample.kotlin'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
}

repositories {
    mavenCentral()
}

dependencies {
    kapt("org.seasar.doma:doma:2.25.1")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    implementation("org.springframework.boot:spring-boot-starter-jdbc")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")

    implementation("org.seasar.doma.boot:doma-spring-boot-starter:1.2.1")
    implementation("org.seasar.doma:doma:2.25.1")

    runtimeOnly("mysql:mysql-connector-java")
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation("io.rest-assured:rest-assured")
    testImplementation("com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0")
    testImplementation("com.ninja-squad:DbSetup:2.1.0")
    testImplementation("org.dbunit:dbunit:2.6.0")
    testImplementation("org.assertj:assertj-db:1.2.0")
    // for Swagger UI Generate
    swaggerUI 'org.webjars:swagger-ui:3.10.0'
}

test {
    useJUnitPlatform()
}

openApiGenerate {
    generatorName = "kotlin-spring"
    inputSpec = "$rootDir/billboard-api/specs/billboard.yml"
    library = "spring-boot"
    outputDir = "$buildDir"
    packageName = "example.kotlin.billboardapi"
    apiPackage = "example.kotlin.billboardapi.web.v1.api"
    modelPackage = "example.kotlin.billboardapi.web.v1.model"
    configOptions = [
            dateLibrary: "java8",
            hideGenerationTimestamp: "ture",
            interfaceOnly: "true"
    ]
    systemProperties = [
            apis  : "",
            models: ""
    ]
}

swaggerSources {
    billboard {
        inputFile = file('specs/billboard.yml')
    }
}
kapt {
    arguments {
        arg("doma.resources.dir", compileKotlin.destinationDir)
    }
}
task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    into compileKotlin.destinationDir
//    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
//    include 'META-INF/**/*.script'
}
compileKotlin {
    dependsOn {
        tasks.openApiGenerate
        tasks.copyDomaResources
    }
    kotlinOptions {
        freeCompilerArgs = ["-Xjsr305=strict"]
        jvmTarget = "1.8"
    }
}
sourceSets.main.java.srcDir("$buildDir/src/main/kotlin")
